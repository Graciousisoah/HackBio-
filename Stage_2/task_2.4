# Code by Gracious Isoah
# load libraries

library(dplyr)      # for manipulation
library(ggplot2)    # for visualization

# import dataset
sift <- read.delim("C:/Users/unknown/Documents/sift.tsv.txt", header = FALSE, quote = "/", fill = TRUE, comment.char = "")
foldX <- read.delim("C:/Users/unknown/Documents/foldX.tsv.txt", header = FALSE, quote = "/", fill = TRUE, comment.char = "")

# print first line
head(sift, 1)
head(foldX, 1)

# assign column names
colnames(sift)[1:3] <- c("Protein", "Amino_Acid", "sift_Score")
colnames(foldX)[1:3] <- c("Protein", "Amino_Acid", "foldX_Score")

# If the first row in each file actually is the header, remove it
if(all(sift[1, 1:3] == c("Protein", "Amino_Acid", "sift_Score"))) {
  sift <- sift[-1, ]
}
if(all(foldX[1, 1:3] == c("Protein", "Amino_Acid", "foldX_Score"))) {
  foldX <- foldX[-1, ]
}

# 2. Create the specific_Protein_aa column

sift <- sift %>% mutate(specific_Protein_aa = paste0(Protein, "_", Amino_Acid))
foldX <- foldX %>% mutate(specific_Protein_aa = paste0(Protein, "_", Amino_Acid))


# 3. Merge the datasets

foldX_subset <- foldX %>% select(specific_Protein_aa, foldX_Score)
merged_df <- merge(sift, foldX_subset, by = "specific_Protein_aa")


# 4. Identify deleterious mutations

# Criteria: SIFT < 0.05 and FoldX > 2
deleterious <- merged_df %>% filter(sift_Score < 0.05 & foldX_Score > 2)


# 5. Extract the wild-type amino acid

# For example, "E63D" -> "E"
deleterious <- deleterious %>% mutate(wt_aa = substr(Amino_Acid, 1, 1))


# 6. Frequency table

aa_freq <- table(deleterious$wt_aa)
print("Frequency table for wild-type amino acids in deleterious mutations:")
print(aa_freq)


# 7. Visualizations

# --- 7a. Barplot using ggplot2 ---
aa_freq_df <- as.data.frame(aa_freq)
colnames(aa_freq_df) <- c("Amino_Acid", "Frequency")

ggplot(aa_freq_df, aes(x = Amino_Acid, y = Frequency, fill = Amino_Acid)) +
  geom_bar(stat = "identity") +
  labs(title = "Frequency of Wild-Type Amino Acids in Deleterious Mutations",
       x = "Amino Acid", y = "Frequency") +
  theme_minimal()

# --- 7b. Pie chart using base R with a legend (Option 1) ---
pie(aa_freq,
    labels = NA,  # Remove slice labels to avoid overlap
    main = "Pie Chart of Wild-Type Amino Acids",
    col = rainbow(length(aa_freq)),
    radius = 1
)

legend("topright",
       legend = names(aa_freq),
       fill = rainbow(length(aa_freq)),
       cex = 0.8,
       bty = "n")  # Remove box around the legend


# 8. Highest impact amino acid

max_aa <- names(which.max(aa_freq))
cat("Amino acid with the highest impact on structure and function:", max_aa, "\n")


# 9. Investigate amino acids > 100 occurrences

high_freq <- aa_freq[aa_freq > 100]
if(length(high_freq) > 0) {
  cat("Amino acids with more than 100 occurrences:\n")
  print(high_freq)
  cat("These amino acids appear very frequently among deleterious mutations. Their high occurrence suggests\n",
      "they are critical for maintaining protein structure and function. Mutations in these residues may lead\n",
      "to significant structural destabilization or functional disruption.\n")
} else {
  cat("No amino acid has more than 100 occurrences in the deleterious mutation dataset.\n")
}
